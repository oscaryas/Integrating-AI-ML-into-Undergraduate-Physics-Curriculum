{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPOnC8SSHnOewvqaXGCghFc"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Crash Course on Computer Science Concepts"],"metadata":{"id":"VV5JcBToKl2B"}},{"cell_type":"code","source":["from typing import List"],"metadata":{"id":"DdizpFz2hTYn","executionInfo":{"status":"ok","timestamp":1753143921712,"user_tz":240,"elapsed":7,"user":{"displayName":"Oscar Yasunaga","userId":"10874276267432031470"}}},"execution_count":29,"outputs":[]},{"cell_type":"markdown","source":["## Objects"],"metadata":{"id":"BnOAaXc1Kp8S"}},{"cell_type":"markdown","source":["Object Oriented Programming is a way of programming. It is a way of organizing your code. You are already have organized code previously with defining functions. That is a way to organize your code logic so that you don't have to continously repeat the same line of code.\n","\n","Objects is just a way to further organize your code. Objects are structures that store functions and variables that that object might need.\n","\n","\n"],"metadata":{"id":"cmBjG7W6KvRb"}},{"cell_type":"markdown","source":["### Attributes"],"metadata":{"id":"XDRF8FFOU26k"}},{"cell_type":"markdown","source":["When objects store variables we call them **attributes**"],"metadata":{"id":"hrjtLdmNU457"}},{"cell_type":"markdown","source":["### Methods"],"metadata":{"id":"wADZ9K9bU61G"}},{"cell_type":"markdown","source":["\n","When objects store these functions we call them **methods**."],"metadata":{"id":"MUoUpktbMYs1"}},{"cell_type":"markdown","source":["## Classes"],"metadata":{"id":"yrTbaWzCNzZA"}},{"cell_type":"markdown","source":["Classes are blueprints to create objects. It gives specification to a broad abstraction of what a car is."],"metadata":{"id":"Ja5hq6PNN1oc"}},{"cell_type":"markdown","source":["Let's look at an example:\n","\n"],"metadata":{"id":"1n4_WzBwLx_A"}},{"cell_type":"markdown","source":["Let's say we want to create a Car object. When you think of a Car, specific details that might be important to the car are speed of the car, the color of the car, and the car model."],"metadata":{"id":"YvqPcGJxMaAK"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"ev-_unE7Kjfa"},"outputs":[],"source":["class Car():\n","  model: str\n","  color: str\n","  speed: float"]},{"cell_type":"markdown","source":["Some functionality of this Car object would be like calculating how far it has traveled, or getting what the color the Car is or getting the Car model"],"metadata":{"id":"XvviRzZDNOYQ"}},{"cell_type":"code","source":["class Car():\n","  #These are Attributes\n","  model: str\n","  color: str\n","  speed: float\n","\n","  #These are Methods.\n","  def getColor():\n","    return self.color\n","\n","  def getModelType():\n","    return self.model\n","\n","  def distanceTraveled(time):\n","    return self.time*speed"],"metadata":{"id":"7vG8C3F8NhEU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["To actually build this car we need a constructor."],"metadata":{"id":"DBkh9TBINxyZ"}},{"cell_type":"markdown","source":["## Constructor"],"metadata":{"id":"tPq8TRpVOIC3"}},{"cell_type":"markdown","source":["Constructors is the concept that actually builds the car. Classes are the blueprint for the structure of what a Car Object will look like, constructors actually build the car."],"metadata":{"id":"YPxDOV5IOJHI"}},{"cell_type":"code","source":["class Car():\n","  #These are Attributes\n","  model: str\n","  color: str\n","  speed: float\n","\n","  #This is the Constructor\n","  def __init__(self, model, color, speed):\n","      self.model = model\n","      self.color = color\n","      self.speed = speed\n","\n","  #These are methods\n","  def getColor(self):\n","    return self.color\n","\n","  def getModelType(self):\n","    return self.model\n","\n","  def distanceTraveled(self, time):\n","    return self.speed*time"],"metadata":{"id":"I8zXb4GKOWou"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["    def __init__(self, model, color, speed):\n","        self.model = model\n","        self.color = color\n","        self.speed = speed\n"],"metadata":{"id":"Vqn-8grMO70q"}},{"cell_type":"markdown","source":["### def \\_\\_init\\_\\_"],"metadata":{"id":"ZGLLpKTIPeMs"}},{"cell_type":"markdown","source":["This is the constructor method that actually builds or instantiates a Car Object. __init__ means initialize and sets the attributes of model type, speed and color to a specific value."],"metadata":{"id":"84huMzKkO_VK"}},{"cell_type":"markdown","source":["### Self"],"metadata":{"id":"pMa_OHvWPc4U"}},{"cell_type":"markdown","source":["the self keyword tells the program to look at the current object. This is just syntax, other languages will have other syntax but for Python, self refers to the current object you are working with."],"metadata":{"id":"JbUkUrkjPU9x"}},{"cell_type":"markdown","source":["## Instantiation"],"metadata":{"id":"eHxtIzZRPO-M"}},{"cell_type":"markdown","source":["Let's now build a car object"],"metadata":{"id":"YZB6jV7gPt4k"}},{"cell_type":"code","source":["car1 = Car(\"Toyota\", \"Red\", 200)\n","car2 = Car(\"BYD\", \"Blue\", 30)"],"metadata":{"id":"J8YT9k2SOifU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["We have two variables, car1 and car2. Each variables stores a Car Object but with different specificaitons.\n","\n","car1 stores a Red Toyota that goes 200 kms\n","\n","car2 stores a Blue BYD that goes 30 kms"],"metadata":{"id":"NEZJTXEmP6rj"}},{"cell_type":"code","source":["car1color = car1.getColor()\n","car2color = car2.getColor()"],"metadata":{"id":"ca1Cu-HrQJir"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(car1color, car2color)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T9FwpVWHQMO3","executionInfo":{"status":"ok","timestamp":1753139471030,"user_tz":240,"elapsed":10,"user":{"displayName":"Oscar Yasunaga","userId":"10874276267432031470"}},"outputId":"3fea0290-b179-458a-ea51-a1f0045c6bdb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Red Blue\n"]}]},{"cell_type":"markdown","source":["We can extract the specific features for each car and store it inside a different variable."],"metadata":{"id":"CQiHuHTeQWnH"}},{"cell_type":"markdown","source":["To call a method we use .method()."],"metadata":{"id":"dJ1LG4BgRy-j"}},{"cell_type":"markdown","source":["You might be wondering shouldn't the code be Car.getColor(car1)?\n","\n","\n"],"metadata":{"id":"4IotOtOMRcfA"}},{"cell_type":"code","source":["car1color = Car.getColor(car1)\n","print(car1color, car2color)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X5wr25c3SPos","executionInfo":{"status":"ok","timestamp":1753139979375,"user_tz":240,"elapsed":6,"user":{"displayName":"Oscar Yasunaga","userId":"10874276267432031470"}},"outputId":"ccfb3b68-bd97-4616-94d3-6ebfbc9636e0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Red Blue\n"]}]},{"cell_type":"markdown","source":["That also works. car1.getColor() automatically feeds car1 into self, that's all"],"metadata":{"id":"ZRkOj2ZjSW37"}},{"cell_type":"markdown","source":["## Your Turn"],"metadata":{"id":"h6R-kTq-TSAS"}},{"cell_type":"markdown","source":["Make me a PhysicsDepartmentMember Class that has attributes that are name, height (cm), yearlySalary.\n","\n","The methods I want in this Class is getName, getHeight, and monthlySalary.\n"],"metadata":{"id":"uNvCk9QnSoTT"}},{"cell_type":"code","source":["#Define PhysicsDepartmentMember Class:\n","class PhysicsDepartmentMember:\n","  #Write Attributes\n","  name: str\n","  height: float\n","  yearlySalary: float\n","\n","  #Define Constructor\n","  def __init__(self, name, height, yearlySalary):\n","    #Initialize attributes\n","    self.name = name\n","    self.height = height\n","    self.yearlySalary = yearlySalary\n","\n","  #Define getName()\n","  def getName(self):\n","    return self.name\n","\n","  #Define getHeight()\n","  def getHeight(self):\n","    return self.height\n","\n","  #Define montlySalary()\n","  def monthlySalary(self):\n","    return self.yearlySalary/12"],"metadata":{"id":"6_J1gSTSTUv0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Instantiate two different members.\n","\n","The first member: Abernathy, 170 cm, yearlySalary: $60k.\n","\n","The second member: Joe, 200 cm, yearlySalary: $0."],"metadata":{"id":"sL5tKye6TssX"}},{"cell_type":"code","source":["dept1 = PhysicsDepartmentMember(\"Abernathy\", 170, 60,000)\n","dept2 = PhysicsDepartmentMember(\"Joe\", 200, 0)"],"metadata":{"id":"6JD157kTT96K"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["I want you to print out the monthlySalary of the Abernathy.\n","\n","I want you to print out the monthlySalary of the Joe"],"metadata":{"id":"nYCLf_ntUB4H"}},{"cell_type":"code","source":["print(dept2.monthlySalary)\n","print(dept1.monthlySalary)"],"metadata":{"id":"ENRLkMysUNMB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Inheritance"],"metadata":{"id":"sJvSZZ1_Se0j"}},{"cell_type":"markdown","source":["Inheritance is yet another way to reduce the amount of code you have to write. This is typically done for making a more specific class."],"metadata":{"id":"xpl924M7SiBl"}},{"cell_type":"markdown","source":["So let's say we have the Car class again. Maybe we want a specific type of Car, the BYD car and the Toyota car, with specific methods and attributes that only the BYD car has."],"metadata":{"id":"jEG7GicqUe4i"}},{"cell_type":"markdown","source":["### Child Class/Subclass"],"metadata":{"id":"_CBvrdFvUu7W"}},{"cell_type":"markdown","source":["BYD Class would be the child class or subclass since it inherits all the attributes of the Car Class"],"metadata":{"id":"_p5Wivx6Uv4j"}},{"cell_type":"markdown","source":["### Parent Class/Superclass"],"metadata":{"id":"SHRUyvQeVG0x"}},{"cell_type":"markdown","source":["The Car class is the super class or parent class since the Car Class is what gets inherited from by the BYD car class."],"metadata":{"id":"h2WKAcwRVLdD"}},{"cell_type":"markdown","source":["Attributes that BYD might have but Car might not is amount of Charge.\n","\n","Methods that BYD might have but car might not is fullyCharged."],"metadata":{"id":"H6DKnBhCXuaz"}},{"cell_type":"code","source":["class BYD(Car):\n","  electricity_usage: float\n","  full_charged: float\n","  current_charge: float\n","\n","  def __init__(self, color, speed, electricity_usage, current_charge):\n","    model = 'BYD'\n","    super().__init__(model, color, speed)\n","    self.electricity_usage = electricity_usage\n","    self.full_charged = 100\n","\n","    if current_charge > 100:\n","      self.current_charge = 100\n","\n","    else:\n","      self.current_charge = current_charge\n","\n","  def isFullyCharged(self):\n","    if self.current_charge == 100:\n","      return True\n","    return False"],"metadata":{"id":"W7K9Vgq_Shr4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Toyota(Car):\n","  gas_usage: float\n","  full_tank: float\n","  current_tank: float\n","\n","  def __init__(self, color, speed, gas_usage, current_tank):\n","    model = \"Toyota\"\n","\n","    super.__init__(model, color, speed)\n","    self.gas_usage = gas_usage\n","    self.full_tank = 100\n","\n","    if current_tank > 100:\n","      self.current_tank = 100\n","    else:\n","      self.current_tank = current_tank\n","\n","  def isFullyFilled(self):\n","    if self.current_tank == 100:\n","      return True\n","    return False"],"metadata":{"id":"gLAeI3IVYq2I"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["    class BYD(Car)"],"metadata":{"id":"3nD1EuqqZUd-"}},{"cell_type":"markdown","source":["This line of code says BYD will inherit attributes/methods from Car class"],"metadata":{"id":"vr6w-ocuZYzj"}},{"cell_type":"markdown","source":["    model = \"Toyota\"\n","    super.__init__(model, color, speed)"],"metadata":{"id":"SHJFg-feZivL"}},{"cell_type":"markdown","source":["This line of code says we will use the Car class constructor to set the model type, the car color and how fast the car will go."],"metadata":{"id":"UvblA4lXZkZ6"}},{"cell_type":"markdown","source":["You don't need to have all the attributes in the constructors argument. You see I set model = \"Toyota\" and set it automatically. You can also do logic with the arguments as seen above."],"metadata":{"id":"DB8ztObUZvKf"}},{"cell_type":"markdown","source":["If you run the code below it will work because byd1 has BYD class which also has the Car class attributes and methods."],"metadata":{"id":"-Ydhz589aPBy"}},{"cell_type":"code","source":["byd1 = BYD(\"Red\", 200, 20, 50)\n","bydcolor = byd1.getColor()\n","print(bydcolor)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nxKiLpcrZ-Nw","executionInfo":{"status":"ok","timestamp":1753142053592,"user_tz":240,"elapsed":61,"user":{"displayName":"Oscar Yasunaga","userId":"10874276267432031470"}},"outputId":"f5b4a833-6314-4f94-a58d-5b45551ee01a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Red\n"]}]},{"cell_type":"code","source":["bydmodel = byd1.getModelType()\n","print(bydmodel)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xLiSgUutaGHf","executionInfo":{"status":"ok","timestamp":1753142054518,"user_tz":240,"elapsed":9,"user":{"displayName":"Oscar Yasunaga","userId":"10874276267432031470"}},"outputId":"e16aed32-32bd-4687-9f2d-62f93ad3435a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["BYD\n"]}]},{"cell_type":"code","source":["byd1.isFullyCharged()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DgIMT4BGaZLS","executionInfo":{"status":"ok","timestamp":1753142112050,"user_tz":240,"elapsed":6,"user":{"displayName":"Oscar Yasunaga","userId":"10874276267432031470"}},"outputId":"ac0adc7b-6e6b-40cd-a31e-43111ea609d8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":28}]},{"cell_type":"markdown","source":["## Your Turn"],"metadata":{"id":"_u08AbuGacBl"}},{"cell_type":"markdown","source":["I want you to create two subclasses that inherit from the PhysicsDepartmentMember"],"metadata":{"id":"ZOtcGd_HaeuN"}},{"cell_type":"markdown","source":["First one is a Professor Class:\n","\n","Attributes for Professor class is\n","\n","classesTaught: List[str]\n","\n","title: str\n","\n","domain (Like Biophysics or High Energy): str\n","\n","I also want the yearlySalary to by default be set to $60k\n","\n","Methods:\n","\n","getDomain."],"metadata":{"id":"Cf_gYc1Uai5o"}},{"cell_type":"markdown","source":["Second one is a Student Class:\n","\n","Attributes for Student Class is:\n","\n","tuition: float\n","\n","classesSelected: List[str]\n","\n","level (Like Graduate, Undergraduate, PHD): str\n","\n","Methods:\n","\n","getLevel"],"metadata":{"id":"1cV04-PKa-a3"}},{"cell_type":"code","source":["#Define Professor Class\n","class Professor(PhysicsDepartmentMember):\n","  #Write Attributes\n","  classesTaught: List[str]\n","  title: str\n","  domain: str\n","\n","  #Define Constructor\n","  def __init__(self, name, height, classesTaught, title, domain):\n","    #Define Salary and Super Constructor\n","    salary = 60,000\n","    super().__init__(name, height, salary)\n","\n","    #Initialize Professor Attributes\n","    self.classesTaught = classesTaught\n","    self.title = title\n","    self.domain = domain\n","\n","  #Define getDomain\n","  def getDomain(self):\n","    return self.domain"],"metadata":{"id":"vb08bqnobXNj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Define Student Class\n","class Student(PhysicsDepartmentMember):\n","  #Write Attributes\n","  tuition: float\n","  classesSelected: List[str]\n","  level: str\n","\n","  #Define Constructor\n","  def __init__(self, name, height, classesSelected, tuition, level):\n","    #Define Salary and Super Constructor\n","    salary = 0\n","    super().__init__(name, height, salary)\n","\n","    #Initialize Student Attributes\n","    self.classesSelected = classesSelected\n","    self.tuition = tuition\n","    self.level = level\n","\n","  #Define getLevel\n","  def getLevel(self):\n","    return self.level"],"metadata":{"id":"fsLPWHq5bXXc"},"execution_count":null,"outputs":[]}]}